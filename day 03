Given an array arr[], where each element is at most k away from its target position, you need to sort the array optimally.

Note: DO NOT use direct library sort() function for this question.

Examples:

Input: arr[] = [6, 5, 3, 2, 8, 10, 9], k = 3
Output: [2, 3, 5, 6, 8, 9, 10]
Explanation: The sorted array will be 2 3 5 6 8 9 10
Input: arr[]= [1, 4, 5, 2, 3, 6, 7, 8, 9, 10], k = 2
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
Explanation: The sorted array will be 1 2 3 4 5 6 7 8 9 10

solun:-

class Solution {
  public:
    void nearlySorted(vector<int>& arr, int k) {
        
        priority_queue<int, vector<int>,greater<int>> pq;
        int n = arr.size();
        
        for(int i=0; i<=k; i++){
            pq.push(arr[i]);
        }
        
        int idx=0;
        
        for(int i=k+1; i<n; i++){
            arr[idx++]=pq.top(); 
            pq.pop();
            pq.push(arr[i]);
        }
        
        while(!pq.empty()){
            arr[idx++]=pq.top();
            pq.pop();
        }
    }
};
